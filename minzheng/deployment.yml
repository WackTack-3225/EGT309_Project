# Min Zheng - Flask app

# Define the Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: ml-app

# This namespace is the common namespace for all our containers
# It is the common identifier to access this application
---
# Flask App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  namespace: ml-app
spec:
  replicas: 3 # Set 3 replicas for stability
  minReadySeconds: 120 #s to start up the pod and wait for the rest of the pods to get created also before accepting requests to it
  selector:
    matchLabels:
      chapter: flask # create with this deploylent for label: flask only
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1 # Allow 1 pod to be unavailable at all times
      maxSurge: 1 # Allow 1 extra pod to be created during update
  template:
    metadata:
      labels:
        chapter: flask # allow flask svc to connect to it
    spec:
      restartPolicy: Always 
      containers:
      - name: flask-container
        image: wacktack/flask-app:latest
        ports:
        - containerPort: 5000 # set port 5000 for connection

---
# Flask app service
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
  namespace: ml-app
  labels:
    chapter: flask # used to identify flask
spec:
  type: NodePort 
  ports:
  - protocol: TCP
    port: 5000  # External port to access
    targetPort: 5000  # Flask app port inside the container
    nodePort: 30005 # assigned nodePort
  selector:
    chapter: flask # used to connect to label: flask

---
# Data Processing Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-processing
  namespace: ml-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: data-processing
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: data-processing
    spec:
      containers:
      - name: data-processing-container
        image: your-data-processing-image:latest
        ports:
        - containerPort: 8080

---
# Model Training Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-training
  namespace: ml-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: model-training
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: model-training
    spec:
      containers:
      - name: model-training-container
        image: your-model-training-image:latest
        ports:
        - containerPort: 8081

---
# Inference Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inference
  namespace: ml-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: inference
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: inference
    spec:
      containers:
      - name: inference-container
        image: your-inference-image:latest
        ports:
        - containerPort: 8082

---
# Example Service for Data Processing
apiVersion: v1
kind: Service
metadata:
  name: data-processing-service
  namespace: ml-app
spec:
  selector:
    app: data-processing
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP

---
# Example Service for Model Training
apiVersion: v1
kind: Service
metadata:
  name: model-training-service
  namespace: ml-app
spec:
  selector:
    app: model-training
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8081
  type: ClusterIP

---
# Example Service for Inference
apiVersion: v1
kind: Service
metadata:
  name: inference-service
  namespace: ml-app
spec:
  selector:
    app: inference
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8082
  type: ClusterIP
